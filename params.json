{"name":"Observer","tagline":"","body":"## Observer.js - a lightweight pub/sub.\r\nObserver is a lightweight pub/sub library that can be used as a single event bus or as a base class for easy communications between objects.\r\n\r\n[https://github.com/jimenglish81/observer](https://github.com/jimenglish81/observer)\r\n\r\nTo install run **npm install** then **grunt**.\r\n\r\n## Background\r\nI authored Observer in order to have a lightweight pub/sub library to use while developing decoupled apps. This functionality is available through multiple libraries and frameworks, but I wanted to be able to have a library agnostic one. \r\n\r\n## Usage\r\nTo use Observer either create a new instance\r\n\r\n```javascript\r\nvar observerInstance = new Observer();\r\n```\r\n\r\nor use Observer's mixin functionality to decorate an object\r\n\r\n```javascript\r\nvar myObject = {};\r\nvar observerMixin = Observer.mixin(myObject);\r\n```\r\n\r\n### Subscribing to an event\r\nSubscribe via the **subscribe** method which takes two mandatory arguments and two optional ones.\r\n* **eventName** - _required_ name of the event you wish to subscribe to.\r\n* **handler** - _required_ handler you wish to run when the event is published. \r\n* **scope** - _optional_ the scope you wish the supplied handler to run in. \r\n* **once** - _optional_ if you wish the handler to only be triggered once and then immediately unsubscribed. \r\n\r\n```javascript\r\nvar observerInstance = new Observer();\r\nobserverInstance.subscribe('myEvent', function() {\r\n   console.log('event published!');\r\n});\r\n```\r\n\r\n### Publishing an event\r\nPublish via the **publish** method which takes one mandatory and any number of other arguments which will be proxied on to the handler.\r\n* **eventName** - _required_ name of the event you wish to publish.\r\n\r\n```javascript\r\nvar observerInstance = new Observer();\r\nobserverInstance.subscribe('myEvent', function() {\r\n   console.log(myArg1, myArg2); // will log \"'foo' 'bar'\"\r\n});\r\nobserverInstance.publish('myEvent', 'foo', 'bar');\r\n```\r\n\r\n### Unsubscribing from an event\r\nSubscribe via the **unsubscribe** method which takes two optional arguments. If neither is supplied it will unsubscribe from all events.\r\n* **eventName** - _optional_ name of the event you wish to unsubscribe from.\r\n* **scope** - _optional_ scope of you wish to unsubscribe from.\r\n\r\n```javascript\r\nvar observerInstance = new Observer();\r\nobserverInstance.unsubscribe('myEvent'); // unsubscribe to myEvent for all scopes.\r\nobserverInstance.unsubscribe('myEvent', window); unsubscribe to myEvent for handlers in the window scope.\r\nobserverInstance.unsubscribe(null, window); unsubscribe to all events for handlers in the window scope.\r\nobserverInstance.unsubscribe(); // unsubscribe to all events in all scopes\r\n```\r\n\r\n## Maintenance\r\nAny issues please contact Jim English (@jimenglish81) or submit a pull request.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}